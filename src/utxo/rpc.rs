//! # gRPC Generated Code Re-export
//!
//! This module re-exports gRPC client code and types generated by `tonic_build`
//! from the `.proto` files located in the `proto/` directory.

use futures_util::{StreamExt, TryStreamExt};
use tonic::codec::Streaming;

// Re-export the specific client and request/response types we need
pub use crate::utxo::rpc_generated::tari_rpc::{
    wallet_client::WalletClient,
    base_node_client::BaseNodeClient,
    SearchUtxosRequest,
    FetchMatchingUtxosRequest,
    FetchMatchingUtxosResponse,
    TransactionOutput,
    HistoricalBlock,
    GetBlocksRequest,
};

impl BaseNodeClient<tonic::transport::Channel> {
    pub async fn scan_for_utxos(
        &mut self,
        request: tonic::Request<SearchUtxosRequest>,
    ) -> Result<tonic::Response<Streaming<HistoricalBlock>>, tonic::Status> {
        let response = self.get_blocks(tonic::Request::new(GetBlocksRequest {
            heights: vec![0],
        })).await?;
        return Ok(response);
        // Call the base node's search_utxos RPC
        // let response = self.search_utxos(request).await?;
        // return Ok(response);
        
        // // Map HistoricalBlock stream to TransactionOutput stream
        // let stream = response.into_inner()
        //     .map_err(|e| tonic::Status::from(e))
        //     .and_then(|block| async move {
        //         // Extract the first output from the block's body
        //         // This is a simplification - you might want to handle all outputs
        //         if let Some(body) = block.block.and_then(|b| b.body) {
        //             if let Some(output) = body.outputs.first().cloned() {
        //                 Ok(output)
        //             } else {
        //                 Ok(TransactionOutput::default())
        //             }
        //         } else {
        //             Ok(TransactionOutput::default())
        //         }
        //     });

        // // Convert the stream to a tonic Streaming type
        // let stream = Streaming::new_response(stream);
        // Ok(tonic::Response::new(stream))
    }
}
